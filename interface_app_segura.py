
import streamlit as st
import openai
import os
import tempfile
import speech_recognition as sr
from PyPDF2 import PdfReader

# CONFIGURA√á√ÉO DA P√ÅGINA
st.set_page_config(page_title="Entrevista IA", layout="centered", initial_sidebar_state="collapsed")

# GERENCIAMENTO DE P√ÅGINAS (Telas)
if "pagina" not in st.session_state:
    st.session_state.pagina = "login"

# TELA 1 ‚Äì LOGIN
if st.session_state.pagina == "login":
    st.title("üîí Acesso Restrito")
    email = st.text_input("Email")
    senha = st.text_input("Senha", type="password")

    if st.button("Entrar"):
        if email == "marciacbarreto@gmail.com" and senha == "123456":
            st.session_state.pagina = "upload"
            st.rerun()
        else:
            st.error("E-mail ou senha inv√°lidos.")

# TELA 2 ‚Äì UPLOAD DO CURR√çCULO + LINK DA REUNI√ÉO
elif st.session_state.pagina == "upload":
    st.title("Entrevista IA ‚Äì Curr√≠culo e Link")
    uploaded_file = st.file_uploader("üìé Envie seu curr√≠culo (PDF)", type=["pdf"])
    link_reuniao = st.text_input("üîó Cole o link da reuni√£o")

    if "curriculo_texto" not in st.session_state:
        st.session_state.curriculo_texto = ""

    if uploaded_file:
        with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
            tmp_file.write(uploaded_file.read())
            tmp_path = tmp_file.name
        reader = PdfReader(tmp_path)
        texto = " ".join([page.extract_text() or "" for page in reader.pages])
        st.session_state.curriculo_texto = texto
        st.success("‚úÖ Curr√≠culo carregado com sucesso.")

    if uploaded_file and link_reuniao:
        if st.button("Avan√ßar"):
            st.session_state.pagina = "entrevista"
            st.rerun()
    else:
        st.info("Envie o curr√≠culo e cole o link para continuar.")

# TELA 3 ‚Äì SIMULA√á√ÉO DE ENTREVISTA POR VOZ
elif st.session_state.pagina == "entrevista":
    st.title("üé§ Entrevista IA (Simula√ß√£o ao vivo)")
    st.info("Aguardando pergunta do recrutador... (microfone ativo)")

    reconhecedor = sr.Recognizer()
    with sr.Microphone() as fonte:
        audio = reconhecedor.listen(fonte, phrase_time_limit=6)

    try:
        pergunta = reconhecedor.recognize_google(audio, language="pt-BR")
        st.success(f"Pergunta captada: {pergunta}")

        openai.api_key = os.getenv("OPENAI_API_KEY")

        prompt = f"""Voc√™ est√° participando de uma entrevista de emprego.

Seu objetivo √© responder √† pergunta feita pelo recrutador usando como refer√™ncia o conte√∫do do curr√≠culo abaixo. Mantenha um tom profissional, confiante, objetivo e claro. Evite respostas vagas ou gen√©ricas. Personalize a resposta com base nas experi√™ncias, habilidades e qualifica√ß√µes descritas no curr√≠culo.

Curr√≠culo:
{st.session_state.curriculo_texto}

Pergunta feita pelo recrutador:
{pergunta}

Instru√ß√µes:
- Responda diretamente √† pergunta com base no curr√≠culo.
- Use um tom natural e seguro, como se estivesse em uma entrevista real.
- Se a pergunta for pessoal ou comportamental, destaque conquistas, experi√™ncias ou atitudes que reforcem sua adequa√ß√£o √† vaga.
- Se a pergunta for t√©cnica, destaque experi√™ncias pr√°ticas, projetos, certifica√ß√µes ou conhecimentos adquiridos.

Importante:
- N√ÉO invente informa√ß√µes.
- N√ÉO cite nomes de empresas que n√£o est√£o no curr√≠culo.
- N√ÉO diga que "n√£o sabe" ‚Äî use o que tiver no curr√≠culo para construir a melhor resposta poss√≠vel.

Agora, gere a resposta ideal para o recrutador com base nas informa√ß√µes acima."""

        resposta = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um candidato em uma entrevista de emprego. Responda com objetividade, clareza e profissionalismo."},
                {"role": "user", "content": prompt}
            ]
        )

        resposta_texto = resposta['choices'][0]['message']['content']
        st.subheader("üí¨ Resposta da IA")
        st.write(resposta_texto)

    except sr.UnknownValueError:
        st.warning("N√£o foi poss√≠vel entender a pergunta. Por favor, fale novamente.")
    except sr.RequestError as e:
        st.error(f"Erro na API de reconhecimento de voz: {e}")
    except Exception as e:
        st.error(f"Ocorreu um erro ao gerar a resposta: {e}")
